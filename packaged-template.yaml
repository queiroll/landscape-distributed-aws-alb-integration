AWSTemplateFormatVersion: '2010-09-09'
Description: "Deploys a dynamic ALB for a Juju model. Includes auto-registration to\
  \ the Target Groups of the ALB for new landscape-server instances added by Juju.\n"
Parameters:
  JujuModelUUID:
    Type: String
    Description: The UUID of the Juju model whose instances will be targeted.
  JujuAppName:
    Type: String
    Description: The name of the Juju application to target.
    Default: landscape-server
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the Juju model is deployed.
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: A comma-separated list of the public subnet IDs for the ALB. Consider
      using subnets from all the AZs in the region for high availability.
  AcmCertificateArn:
    Type: String
    Description: (REQUIRED) The ARN of the ACM certificate for the ALB's HTTPS listener.
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: JujuAlbTagSyncPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:DescribeInstanceAttribute
            - ec2:ModifyInstanceAttribute
            Resource: '*'
          - Effect: Allow
            Action:
            - elasticloadbalancing:RegisterTargets
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:DescribeTargetHealth
            Resource:
              Fn::Sub: arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/*
  JujuSyncFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: sync_lambda.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.10
      Timeout: 120
      Code:
        S3Bucket: landscape-scalable-alb
        S3Key: 2197ac928c3402f18ecf349a7e919815
      Environment:
        Variables:
          MODEL_UUID:
            Ref: JujuModelUUID
          APP_NAME:
            Ref: JujuAppName
          TARGET_GROUP_ARNS:
            Fn::Join:
            - ','
            - - Ref: LandscapeMainTG
              - Ref: LandscapeMessageTG
              - Ref: LandscapeApiTG
              - Ref: LandscapePingTG
              - Ref: LandscapeUploadTG
          INGRESS_SG_ID:
            Ref: LandscapeIngressSecurityGroup
  InitialSyncResource:
    Type: Custom::JujuSync
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - JujuSyncFunction
        - Arn
      Version: '10.0'
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic to the ALB
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  LandscapeIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Ingress from ALB to Landscape Instances
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 8090
        ToPort: 8090
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 9080
        ToPort: 9080
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 8070
        ToPort: 8070
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 9100
        ToPort: 9100
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Landscape-Ingress-SG-${AWS::StackName}
  LandscapeMainTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /
      Matcher:
        HttpCode: 200,303
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  LandscapeMessageTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      Port: 8090
      HealthCheckPath: /
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  LandscapeApiTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      Port: 9080
      HealthCheckPath: /
      Matcher:
        HttpCode: 200,404
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  LandscapePingTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      Port: 8070
      HealthCheckPath: /ping
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  LandscapeUploadTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: VpcId
      Protocol: HTTP
      Port: 9100
      HealthCheckPath: /
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        Ref: PublicSubnetIds
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Scheme: internet-facing
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
      - CertificateArn:
          Ref: AcmCertificateArn
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeMainTG
  HttpsRuleMessage:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListener
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - /message-system/*
        - /attachment/*
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeMessageTG
  HttpsRuleApi:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListener
      Priority: 2
      Conditions:
      - Field: path-pattern
        Values:
        - /api/*
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeApiTG
  HttpsRuleUpload:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListener
      Priority: 3
      Conditions:
      - Field: path-pattern
        Values:
        - /upload/*
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeUploadTG
  HttpsRuleHashid:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListener
      Priority: 4
      Conditions:
      - Field: path-pattern
        Values:
        - /hash-id-databases/*
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeMainTG
  HttpsRulePing:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListener
      Priority: 5
      Conditions:
      - Field: path-pattern
        Values:
        - /ping
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapePingTG
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: '443'
          StatusCode: HTTP_301
  HttpRulePing:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpListener
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - /ping
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapePingTG
  HttpRuleRepo:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: HttpListener
      Priority: 2
      Conditions:
      - Field: path-pattern
        Values:
        - /repository/*
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: LandscapeMainTG
  EC2StateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers Lambda when a Juju instance enters the RUNNING state
      EventPattern:
        source:
        - aws.ec2
        account:
        - Ref: AWS::AccountId
        region:
        - Ref: AWS::Region
        detail-type:
        - EC2 Instance State-change Notification
        detail:
          state:
          - running
      Targets:
      - Arn:
          Fn::GetAtt:
          - JujuSyncFunction
          - Arn
        Id: JujuSyncLambdaTarget
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - JujuSyncFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EC2StateChangeRule
        - Arn
Outputs:
  ALBDNSName:
    Description: The DNS name of the Application Load Balancer.
    Value:
      Fn::GetAtt:
      - ApplicationLoadBalancer
      - DNSName
